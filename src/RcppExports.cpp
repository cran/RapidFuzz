// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// damerau_levenshtein_distance
size_t damerau_levenshtein_distance(std::string s1, std::string s2, Rcpp::Nullable<double> score_cutoff);
RcppExport SEXP _RapidFuzz_damerau_levenshtein_distance(SEXP s1SEXP, SEXP s2SEXP, SEXP score_cutoffSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type s1(s1SEXP);
    Rcpp::traits::input_parameter< std::string >::type s2(s2SEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<double> >::type score_cutoff(score_cutoffSEXP);
    rcpp_result_gen = Rcpp::wrap(damerau_levenshtein_distance(s1, s2, score_cutoff));
    return rcpp_result_gen;
END_RCPP
}
// damerau_levenshtein_similarity
size_t damerau_levenshtein_similarity(std::string s1, std::string s2, size_t score_cutoff);
RcppExport SEXP _RapidFuzz_damerau_levenshtein_similarity(SEXP s1SEXP, SEXP s2SEXP, SEXP score_cutoffSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type s1(s1SEXP);
    Rcpp::traits::input_parameter< std::string >::type s2(s2SEXP);
    Rcpp::traits::input_parameter< size_t >::type score_cutoff(score_cutoffSEXP);
    rcpp_result_gen = Rcpp::wrap(damerau_levenshtein_similarity(s1, s2, score_cutoff));
    return rcpp_result_gen;
END_RCPP
}
// damerau_levenshtein_normalized_distance
double damerau_levenshtein_normalized_distance(std::string s1, std::string s2, double score_cutoff);
RcppExport SEXP _RapidFuzz_damerau_levenshtein_normalized_distance(SEXP s1SEXP, SEXP s2SEXP, SEXP score_cutoffSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type s1(s1SEXP);
    Rcpp::traits::input_parameter< std::string >::type s2(s2SEXP);
    Rcpp::traits::input_parameter< double >::type score_cutoff(score_cutoffSEXP);
    rcpp_result_gen = Rcpp::wrap(damerau_levenshtein_normalized_distance(s1, s2, score_cutoff));
    return rcpp_result_gen;
END_RCPP
}
// damerau_levenshtein_normalized_similarity
double damerau_levenshtein_normalized_similarity(std::string s1, std::string s2, double score_cutoff);
RcppExport SEXP _RapidFuzz_damerau_levenshtein_normalized_similarity(SEXP s1SEXP, SEXP s2SEXP, SEXP score_cutoffSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type s1(s1SEXP);
    Rcpp::traits::input_parameter< std::string >::type s2(s2SEXP);
    Rcpp::traits::input_parameter< double >::type score_cutoff(score_cutoffSEXP);
    rcpp_result_gen = Rcpp::wrap(damerau_levenshtein_normalized_similarity(s1, s2, score_cutoff));
    return rcpp_result_gen;
END_RCPP
}
// get_editops
DataFrame get_editops(std::string s1, std::string s2);
RcppExport SEXP _RapidFuzz_get_editops(SEXP s1SEXP, SEXP s2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type s1(s1SEXP);
    Rcpp::traits::input_parameter< std::string >::type s2(s2SEXP);
    rcpp_result_gen = Rcpp::wrap(get_editops(s1, s2));
    return rcpp_result_gen;
END_RCPP
}
// editops_apply_str
std::string editops_apply_str(Rcpp::DataFrame editops, std::string s1, std::string s2);
RcppExport SEXP _RapidFuzz_editops_apply_str(SEXP editopsSEXP, SEXP s1SEXP, SEXP s2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::DataFrame >::type editops(editopsSEXP);
    Rcpp::traits::input_parameter< std::string >::type s1(s1SEXP);
    Rcpp::traits::input_parameter< std::string >::type s2(s2SEXP);
    rcpp_result_gen = Rcpp::wrap(editops_apply_str(editops, s1, s2));
    return rcpp_result_gen;
END_RCPP
}
// opcodes_apply_str
std::string opcodes_apply_str(Rcpp::DataFrame opcodes, std::string s1, std::string s2);
RcppExport SEXP _RapidFuzz_opcodes_apply_str(SEXP opcodesSEXP, SEXP s1SEXP, SEXP s2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::DataFrame >::type opcodes(opcodesSEXP);
    Rcpp::traits::input_parameter< std::string >::type s1(s1SEXP);
    Rcpp::traits::input_parameter< std::string >::type s2(s2SEXP);
    rcpp_result_gen = Rcpp::wrap(opcodes_apply_str(opcodes, s1, s2));
    return rcpp_result_gen;
END_RCPP
}
// opcodes_apply_vec
Rcpp::CharacterVector opcodes_apply_vec(Rcpp::DataFrame opcodes, std::string s1, std::string s2);
RcppExport SEXP _RapidFuzz_opcodes_apply_vec(SEXP opcodesSEXP, SEXP s1SEXP, SEXP s2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::DataFrame >::type opcodes(opcodesSEXP);
    Rcpp::traits::input_parameter< std::string >::type s1(s1SEXP);
    Rcpp::traits::input_parameter< std::string >::type s2(s2SEXP);
    rcpp_result_gen = Rcpp::wrap(opcodes_apply_vec(opcodes, s1, s2));
    return rcpp_result_gen;
END_RCPP
}
// editops_apply_vec
Rcpp::CharacterVector editops_apply_vec(Rcpp::DataFrame editops, std::string s1, std::string s2);
RcppExport SEXP _RapidFuzz_editops_apply_vec(SEXP editopsSEXP, SEXP s1SEXP, SEXP s2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::DataFrame >::type editops(editopsSEXP);
    Rcpp::traits::input_parameter< std::string >::type s1(s1SEXP);
    Rcpp::traits::input_parameter< std::string >::type s2(s2SEXP);
    rcpp_result_gen = Rcpp::wrap(editops_apply_vec(editops, s1, s2));
    return rcpp_result_gen;
END_RCPP
}
// processString
std::string processString(const std::string& input, bool processor, bool asciify);
RcppExport SEXP _RapidFuzz_processString(SEXP inputSEXP, SEXP processorSEXP, SEXP asciifySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::string& >::type input(inputSEXP);
    Rcpp::traits::input_parameter< bool >::type processor(processorSEXP);
    Rcpp::traits::input_parameter< bool >::type asciify(asciifySEXP);
    rcpp_result_gen = Rcpp::wrap(processString(input, processor, asciify));
    return rcpp_result_gen;
END_RCPP
}
// extract_similar_strings
Rcpp::DataFrame extract_similar_strings(const std::string& query, const std::vector<std::string>& choices, double score_cutoff, bool processor);
RcppExport SEXP _RapidFuzz_extract_similar_strings(SEXP querySEXP, SEXP choicesSEXP, SEXP score_cutoffSEXP, SEXP processorSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::string& >::type query(querySEXP);
    Rcpp::traits::input_parameter< const std::vector<std::string>& >::type choices(choicesSEXP);
    Rcpp::traits::input_parameter< double >::type score_cutoff(score_cutoffSEXP);
    Rcpp::traits::input_parameter< bool >::type processor(processorSEXP);
    rcpp_result_gen = Rcpp::wrap(extract_similar_strings(query, choices, score_cutoff, processor));
    return rcpp_result_gen;
END_RCPP
}
// extract_best_match
Rcpp::List extract_best_match(const std::string& query, const std::vector<std::string>& choices, double score_cutoff, bool processor);
RcppExport SEXP _RapidFuzz_extract_best_match(SEXP querySEXP, SEXP choicesSEXP, SEXP score_cutoffSEXP, SEXP processorSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::string& >::type query(querySEXP);
    Rcpp::traits::input_parameter< const std::vector<std::string>& >::type choices(choicesSEXP);
    Rcpp::traits::input_parameter< double >::type score_cutoff(score_cutoffSEXP);
    Rcpp::traits::input_parameter< bool >::type processor(processorSEXP);
    rcpp_result_gen = Rcpp::wrap(extract_best_match(query, choices, score_cutoff, processor));
    return rcpp_result_gen;
END_RCPP
}
// extract_matches
Rcpp::DataFrame extract_matches(const std::string& query, const std::vector<std::string>& choices, double score_cutoff, int limit, bool processor, std::string scorer);
RcppExport SEXP _RapidFuzz_extract_matches(SEXP querySEXP, SEXP choicesSEXP, SEXP score_cutoffSEXP, SEXP limitSEXP, SEXP processorSEXP, SEXP scorerSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::string& >::type query(querySEXP);
    Rcpp::traits::input_parameter< const std::vector<std::string>& >::type choices(choicesSEXP);
    Rcpp::traits::input_parameter< double >::type score_cutoff(score_cutoffSEXP);
    Rcpp::traits::input_parameter< int >::type limit(limitSEXP);
    Rcpp::traits::input_parameter< bool >::type processor(processorSEXP);
    Rcpp::traits::input_parameter< std::string >::type scorer(scorerSEXP);
    rcpp_result_gen = Rcpp::wrap(extract_matches(query, choices, score_cutoff, limit, processor, scorer));
    return rcpp_result_gen;
END_RCPP
}
// fuzz_ratio
double fuzz_ratio(std::string s1, std::string s2, double score_cutoff);
RcppExport SEXP _RapidFuzz_fuzz_ratio(SEXP s1SEXP, SEXP s2SEXP, SEXP score_cutoffSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type s1(s1SEXP);
    Rcpp::traits::input_parameter< std::string >::type s2(s2SEXP);
    Rcpp::traits::input_parameter< double >::type score_cutoff(score_cutoffSEXP);
    rcpp_result_gen = Rcpp::wrap(fuzz_ratio(s1, s2, score_cutoff));
    return rcpp_result_gen;
END_RCPP
}
// fuzz_partial_ratio
double fuzz_partial_ratio(std::string s1, std::string s2, double score_cutoff);
RcppExport SEXP _RapidFuzz_fuzz_partial_ratio(SEXP s1SEXP, SEXP s2SEXP, SEXP score_cutoffSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type s1(s1SEXP);
    Rcpp::traits::input_parameter< std::string >::type s2(s2SEXP);
    Rcpp::traits::input_parameter< double >::type score_cutoff(score_cutoffSEXP);
    rcpp_result_gen = Rcpp::wrap(fuzz_partial_ratio(s1, s2, score_cutoff));
    return rcpp_result_gen;
END_RCPP
}
// fuzz_token_sort_ratio
double fuzz_token_sort_ratio(std::string s1, std::string s2, double score_cutoff);
RcppExport SEXP _RapidFuzz_fuzz_token_sort_ratio(SEXP s1SEXP, SEXP s2SEXP, SEXP score_cutoffSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type s1(s1SEXP);
    Rcpp::traits::input_parameter< std::string >::type s2(s2SEXP);
    Rcpp::traits::input_parameter< double >::type score_cutoff(score_cutoffSEXP);
    rcpp_result_gen = Rcpp::wrap(fuzz_token_sort_ratio(s1, s2, score_cutoff));
    return rcpp_result_gen;
END_RCPP
}
// fuzz_token_set_ratio
double fuzz_token_set_ratio(std::string s1, std::string s2, double score_cutoff);
RcppExport SEXP _RapidFuzz_fuzz_token_set_ratio(SEXP s1SEXP, SEXP s2SEXP, SEXP score_cutoffSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type s1(s1SEXP);
    Rcpp::traits::input_parameter< std::string >::type s2(s2SEXP);
    Rcpp::traits::input_parameter< double >::type score_cutoff(score_cutoffSEXP);
    rcpp_result_gen = Rcpp::wrap(fuzz_token_set_ratio(s1, s2, score_cutoff));
    return rcpp_result_gen;
END_RCPP
}
// fuzz_token_ratio
double fuzz_token_ratio(std::string s1, std::string s2, double score_cutoff);
RcppExport SEXP _RapidFuzz_fuzz_token_ratio(SEXP s1SEXP, SEXP s2SEXP, SEXP score_cutoffSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type s1(s1SEXP);
    Rcpp::traits::input_parameter< std::string >::type s2(s2SEXP);
    Rcpp::traits::input_parameter< double >::type score_cutoff(score_cutoffSEXP);
    rcpp_result_gen = Rcpp::wrap(fuzz_token_ratio(s1, s2, score_cutoff));
    return rcpp_result_gen;
END_RCPP
}
// fuzz_WRatio
double fuzz_WRatio(std::string s1, std::string s2, double score_cutoff);
RcppExport SEXP _RapidFuzz_fuzz_WRatio(SEXP s1SEXP, SEXP s2SEXP, SEXP score_cutoffSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type s1(s1SEXP);
    Rcpp::traits::input_parameter< std::string >::type s2(s2SEXP);
    Rcpp::traits::input_parameter< double >::type score_cutoff(score_cutoffSEXP);
    rcpp_result_gen = Rcpp::wrap(fuzz_WRatio(s1, s2, score_cutoff));
    return rcpp_result_gen;
END_RCPP
}
// fuzz_QRatio
double fuzz_QRatio(std::string s1, std::string s2, double score_cutoff);
RcppExport SEXP _RapidFuzz_fuzz_QRatio(SEXP s1SEXP, SEXP s2SEXP, SEXP score_cutoffSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type s1(s1SEXP);
    Rcpp::traits::input_parameter< std::string >::type s2(s2SEXP);
    Rcpp::traits::input_parameter< double >::type score_cutoff(score_cutoffSEXP);
    rcpp_result_gen = Rcpp::wrap(fuzz_QRatio(s1, s2, score_cutoff));
    return rcpp_result_gen;
END_RCPP
}
// hamming_distance
size_t hamming_distance(std::string s1, std::string s2, bool pad);
RcppExport SEXP _RapidFuzz_hamming_distance(SEXP s1SEXP, SEXP s2SEXP, SEXP padSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type s1(s1SEXP);
    Rcpp::traits::input_parameter< std::string >::type s2(s2SEXP);
    Rcpp::traits::input_parameter< bool >::type pad(padSEXP);
    rcpp_result_gen = Rcpp::wrap(hamming_distance(s1, s2, pad));
    return rcpp_result_gen;
END_RCPP
}
// hamming_similarity
size_t hamming_similarity(std::string s1, std::string s2, bool pad);
RcppExport SEXP _RapidFuzz_hamming_similarity(SEXP s1SEXP, SEXP s2SEXP, SEXP padSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type s1(s1SEXP);
    Rcpp::traits::input_parameter< std::string >::type s2(s2SEXP);
    Rcpp::traits::input_parameter< bool >::type pad(padSEXP);
    rcpp_result_gen = Rcpp::wrap(hamming_similarity(s1, s2, pad));
    return rcpp_result_gen;
END_RCPP
}
// hamming_normalized_distance
double hamming_normalized_distance(std::string s1, std::string s2, bool pad);
RcppExport SEXP _RapidFuzz_hamming_normalized_distance(SEXP s1SEXP, SEXP s2SEXP, SEXP padSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type s1(s1SEXP);
    Rcpp::traits::input_parameter< std::string >::type s2(s2SEXP);
    Rcpp::traits::input_parameter< bool >::type pad(padSEXP);
    rcpp_result_gen = Rcpp::wrap(hamming_normalized_distance(s1, s2, pad));
    return rcpp_result_gen;
END_RCPP
}
// hamming_normalized_similarity
double hamming_normalized_similarity(std::string s1, std::string s2, bool pad);
RcppExport SEXP _RapidFuzz_hamming_normalized_similarity(SEXP s1SEXP, SEXP s2SEXP, SEXP padSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type s1(s1SEXP);
    Rcpp::traits::input_parameter< std::string >::type s2(s2SEXP);
    Rcpp::traits::input_parameter< bool >::type pad(padSEXP);
    rcpp_result_gen = Rcpp::wrap(hamming_normalized_similarity(s1, s2, pad));
    return rcpp_result_gen;
END_RCPP
}
// indel_distance
size_t indel_distance(std::string s1, std::string s2);
RcppExport SEXP _RapidFuzz_indel_distance(SEXP s1SEXP, SEXP s2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type s1(s1SEXP);
    Rcpp::traits::input_parameter< std::string >::type s2(s2SEXP);
    rcpp_result_gen = Rcpp::wrap(indel_distance(s1, s2));
    return rcpp_result_gen;
END_RCPP
}
// indel_normalized_distance
double indel_normalized_distance(std::string s1, std::string s2);
RcppExport SEXP _RapidFuzz_indel_normalized_distance(SEXP s1SEXP, SEXP s2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type s1(s1SEXP);
    Rcpp::traits::input_parameter< std::string >::type s2(s2SEXP);
    rcpp_result_gen = Rcpp::wrap(indel_normalized_distance(s1, s2));
    return rcpp_result_gen;
END_RCPP
}
// indel_similarity
size_t indel_similarity(std::string s1, std::string s2);
RcppExport SEXP _RapidFuzz_indel_similarity(SEXP s1SEXP, SEXP s2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type s1(s1SEXP);
    Rcpp::traits::input_parameter< std::string >::type s2(s2SEXP);
    rcpp_result_gen = Rcpp::wrap(indel_similarity(s1, s2));
    return rcpp_result_gen;
END_RCPP
}
// indel_normalized_similarity
double indel_normalized_similarity(std::string s1, std::string s2);
RcppExport SEXP _RapidFuzz_indel_normalized_similarity(SEXP s1SEXP, SEXP s2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type s1(s1SEXP);
    Rcpp::traits::input_parameter< std::string >::type s2(s2SEXP);
    rcpp_result_gen = Rcpp::wrap(indel_normalized_similarity(s1, s2));
    return rcpp_result_gen;
END_RCPP
}
// jaro_distance
double jaro_distance(std::string s1, std::string s2);
RcppExport SEXP _RapidFuzz_jaro_distance(SEXP s1SEXP, SEXP s2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type s1(s1SEXP);
    Rcpp::traits::input_parameter< std::string >::type s2(s2SEXP);
    rcpp_result_gen = Rcpp::wrap(jaro_distance(s1, s2));
    return rcpp_result_gen;
END_RCPP
}
// jaro_similarity
double jaro_similarity(std::string s1, std::string s2);
RcppExport SEXP _RapidFuzz_jaro_similarity(SEXP s1SEXP, SEXP s2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type s1(s1SEXP);
    Rcpp::traits::input_parameter< std::string >::type s2(s2SEXP);
    rcpp_result_gen = Rcpp::wrap(jaro_similarity(s1, s2));
    return rcpp_result_gen;
END_RCPP
}
// jaro_normalized_distance
double jaro_normalized_distance(std::string s1, std::string s2);
RcppExport SEXP _RapidFuzz_jaro_normalized_distance(SEXP s1SEXP, SEXP s2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type s1(s1SEXP);
    Rcpp::traits::input_parameter< std::string >::type s2(s2SEXP);
    rcpp_result_gen = Rcpp::wrap(jaro_normalized_distance(s1, s2));
    return rcpp_result_gen;
END_RCPP
}
// jaro_normalized_similarity
double jaro_normalized_similarity(std::string s1, std::string s2);
RcppExport SEXP _RapidFuzz_jaro_normalized_similarity(SEXP s1SEXP, SEXP s2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type s1(s1SEXP);
    Rcpp::traits::input_parameter< std::string >::type s2(s2SEXP);
    rcpp_result_gen = Rcpp::wrap(jaro_normalized_similarity(s1, s2));
    return rcpp_result_gen;
END_RCPP
}
// jaro_winkler_distance
double jaro_winkler_distance(std::string s1, std::string s2, double prefix_weight);
RcppExport SEXP _RapidFuzz_jaro_winkler_distance(SEXP s1SEXP, SEXP s2SEXP, SEXP prefix_weightSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type s1(s1SEXP);
    Rcpp::traits::input_parameter< std::string >::type s2(s2SEXP);
    Rcpp::traits::input_parameter< double >::type prefix_weight(prefix_weightSEXP);
    rcpp_result_gen = Rcpp::wrap(jaro_winkler_distance(s1, s2, prefix_weight));
    return rcpp_result_gen;
END_RCPP
}
// jaro_winkler_similarity
double jaro_winkler_similarity(std::string s1, std::string s2, double prefix_weight);
RcppExport SEXP _RapidFuzz_jaro_winkler_similarity(SEXP s1SEXP, SEXP s2SEXP, SEXP prefix_weightSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type s1(s1SEXP);
    Rcpp::traits::input_parameter< std::string >::type s2(s2SEXP);
    Rcpp::traits::input_parameter< double >::type prefix_weight(prefix_weightSEXP);
    rcpp_result_gen = Rcpp::wrap(jaro_winkler_similarity(s1, s2, prefix_weight));
    return rcpp_result_gen;
END_RCPP
}
// jaro_winkler_normalized_distance
double jaro_winkler_normalized_distance(std::string s1, std::string s2, double prefix_weight);
RcppExport SEXP _RapidFuzz_jaro_winkler_normalized_distance(SEXP s1SEXP, SEXP s2SEXP, SEXP prefix_weightSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type s1(s1SEXP);
    Rcpp::traits::input_parameter< std::string >::type s2(s2SEXP);
    Rcpp::traits::input_parameter< double >::type prefix_weight(prefix_weightSEXP);
    rcpp_result_gen = Rcpp::wrap(jaro_winkler_normalized_distance(s1, s2, prefix_weight));
    return rcpp_result_gen;
END_RCPP
}
// jaro_winkler_normalized_similarity
double jaro_winkler_normalized_similarity(std::string s1, std::string s2, double prefix_weight);
RcppExport SEXP _RapidFuzz_jaro_winkler_normalized_similarity(SEXP s1SEXP, SEXP s2SEXP, SEXP prefix_weightSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type s1(s1SEXP);
    Rcpp::traits::input_parameter< std::string >::type s2(s2SEXP);
    Rcpp::traits::input_parameter< double >::type prefix_weight(prefix_weightSEXP);
    rcpp_result_gen = Rcpp::wrap(jaro_winkler_normalized_similarity(s1, s2, prefix_weight));
    return rcpp_result_gen;
END_RCPP
}
// lcs_seq_distance
size_t lcs_seq_distance(std::string s1, std::string s2, Rcpp::Nullable<double> score_cutoff);
RcppExport SEXP _RapidFuzz_lcs_seq_distance(SEXP s1SEXP, SEXP s2SEXP, SEXP score_cutoffSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type s1(s1SEXP);
    Rcpp::traits::input_parameter< std::string >::type s2(s2SEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<double> >::type score_cutoff(score_cutoffSEXP);
    rcpp_result_gen = Rcpp::wrap(lcs_seq_distance(s1, s2, score_cutoff));
    return rcpp_result_gen;
END_RCPP
}
// lcs_seq_similarity
size_t lcs_seq_similarity(std::string s1, std::string s2, size_t score_cutoff);
RcppExport SEXP _RapidFuzz_lcs_seq_similarity(SEXP s1SEXP, SEXP s2SEXP, SEXP score_cutoffSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type s1(s1SEXP);
    Rcpp::traits::input_parameter< std::string >::type s2(s2SEXP);
    Rcpp::traits::input_parameter< size_t >::type score_cutoff(score_cutoffSEXP);
    rcpp_result_gen = Rcpp::wrap(lcs_seq_similarity(s1, s2, score_cutoff));
    return rcpp_result_gen;
END_RCPP
}
// lcs_seq_normalized_distance
double lcs_seq_normalized_distance(std::string s1, std::string s2, double score_cutoff);
RcppExport SEXP _RapidFuzz_lcs_seq_normalized_distance(SEXP s1SEXP, SEXP s2SEXP, SEXP score_cutoffSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type s1(s1SEXP);
    Rcpp::traits::input_parameter< std::string >::type s2(s2SEXP);
    Rcpp::traits::input_parameter< double >::type score_cutoff(score_cutoffSEXP);
    rcpp_result_gen = Rcpp::wrap(lcs_seq_normalized_distance(s1, s2, score_cutoff));
    return rcpp_result_gen;
END_RCPP
}
// lcs_seq_normalized_similarity
double lcs_seq_normalized_similarity(std::string s1, std::string s2, double score_cutoff);
RcppExport SEXP _RapidFuzz_lcs_seq_normalized_similarity(SEXP s1SEXP, SEXP s2SEXP, SEXP score_cutoffSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type s1(s1SEXP);
    Rcpp::traits::input_parameter< std::string >::type s2(s2SEXP);
    Rcpp::traits::input_parameter< double >::type score_cutoff(score_cutoffSEXP);
    rcpp_result_gen = Rcpp::wrap(lcs_seq_normalized_similarity(s1, s2, score_cutoff));
    return rcpp_result_gen;
END_RCPP
}
// lcs_seq_editops
DataFrame lcs_seq_editops(std::string s1, std::string s2);
RcppExport SEXP _RapidFuzz_lcs_seq_editops(SEXP s1SEXP, SEXP s2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type s1(s1SEXP);
    Rcpp::traits::input_parameter< std::string >::type s2(s2SEXP);
    rcpp_result_gen = Rcpp::wrap(lcs_seq_editops(s1, s2));
    return rcpp_result_gen;
END_RCPP
}
// levenshtein_distance
size_t levenshtein_distance(std::string s1, std::string s2);
RcppExport SEXP _RapidFuzz_levenshtein_distance(SEXP s1SEXP, SEXP s2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type s1(s1SEXP);
    Rcpp::traits::input_parameter< std::string >::type s2(s2SEXP);
    rcpp_result_gen = Rcpp::wrap(levenshtein_distance(s1, s2));
    return rcpp_result_gen;
END_RCPP
}
// levenshtein_normalized_distance
double levenshtein_normalized_distance(std::string s1, std::string s2);
RcppExport SEXP _RapidFuzz_levenshtein_normalized_distance(SEXP s1SEXP, SEXP s2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type s1(s1SEXP);
    Rcpp::traits::input_parameter< std::string >::type s2(s2SEXP);
    rcpp_result_gen = Rcpp::wrap(levenshtein_normalized_distance(s1, s2));
    return rcpp_result_gen;
END_RCPP
}
// levenshtein_similarity
size_t levenshtein_similarity(std::string s1, std::string s2);
RcppExport SEXP _RapidFuzz_levenshtein_similarity(SEXP s1SEXP, SEXP s2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type s1(s1SEXP);
    Rcpp::traits::input_parameter< std::string >::type s2(s2SEXP);
    rcpp_result_gen = Rcpp::wrap(levenshtein_similarity(s1, s2));
    return rcpp_result_gen;
END_RCPP
}
// levenshtein_normalized_similarity
double levenshtein_normalized_similarity(std::string s1, std::string s2);
RcppExport SEXP _RapidFuzz_levenshtein_normalized_similarity(SEXP s1SEXP, SEXP s2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type s1(s1SEXP);
    Rcpp::traits::input_parameter< std::string >::type s2(s2SEXP);
    rcpp_result_gen = Rcpp::wrap(levenshtein_normalized_similarity(s1, s2));
    return rcpp_result_gen;
END_RCPP
}
// osa_normalized_similarity
double osa_normalized_similarity(std::string s1, std::string s2, double score_cutoff);
RcppExport SEXP _RapidFuzz_osa_normalized_similarity(SEXP s1SEXP, SEXP s2SEXP, SEXP score_cutoffSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type s1(s1SEXP);
    Rcpp::traits::input_parameter< std::string >::type s2(s2SEXP);
    Rcpp::traits::input_parameter< double >::type score_cutoff(score_cutoffSEXP);
    rcpp_result_gen = Rcpp::wrap(osa_normalized_similarity(s1, s2, score_cutoff));
    return rcpp_result_gen;
END_RCPP
}
// osa_editops
DataFrame osa_editops(std::string s1, std::string s2);
RcppExport SEXP _RapidFuzz_osa_editops(SEXP s1SEXP, SEXP s2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type s1(s1SEXP);
    Rcpp::traits::input_parameter< std::string >::type s2(s2SEXP);
    rcpp_result_gen = Rcpp::wrap(osa_editops(s1, s2));
    return rcpp_result_gen;
END_RCPP
}
// osa_distance
size_t osa_distance(std::string s1, std::string s2, Rcpp::Nullable<double> score_cutoff);
RcppExport SEXP _RapidFuzz_osa_distance(SEXP s1SEXP, SEXP s2SEXP, SEXP score_cutoffSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type s1(s1SEXP);
    Rcpp::traits::input_parameter< std::string >::type s2(s2SEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<double> >::type score_cutoff(score_cutoffSEXP);
    rcpp_result_gen = Rcpp::wrap(osa_distance(s1, s2, score_cutoff));
    return rcpp_result_gen;
END_RCPP
}
// osa_similarity
size_t osa_similarity(std::string s1, std::string s2, size_t score_cutoff);
RcppExport SEXP _RapidFuzz_osa_similarity(SEXP s1SEXP, SEXP s2SEXP, SEXP score_cutoffSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type s1(s1SEXP);
    Rcpp::traits::input_parameter< std::string >::type s2(s2SEXP);
    Rcpp::traits::input_parameter< size_t >::type score_cutoff(score_cutoffSEXP);
    rcpp_result_gen = Rcpp::wrap(osa_similarity(s1, s2, score_cutoff));
    return rcpp_result_gen;
END_RCPP
}
// osa_normalized_distance
double osa_normalized_distance(std::string s1, std::string s2, double score_cutoff);
RcppExport SEXP _RapidFuzz_osa_normalized_distance(SEXP s1SEXP, SEXP s2SEXP, SEXP score_cutoffSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type s1(s1SEXP);
    Rcpp::traits::input_parameter< std::string >::type s2(s2SEXP);
    Rcpp::traits::input_parameter< double >::type score_cutoff(score_cutoffSEXP);
    rcpp_result_gen = Rcpp::wrap(osa_normalized_distance(s1, s2, score_cutoff));
    return rcpp_result_gen;
END_RCPP
}
// postfix_distance
size_t postfix_distance(std::string s1, std::string s2, Rcpp::Nullable<double> score_cutoff);
RcppExport SEXP _RapidFuzz_postfix_distance(SEXP s1SEXP, SEXP s2SEXP, SEXP score_cutoffSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type s1(s1SEXP);
    Rcpp::traits::input_parameter< std::string >::type s2(s2SEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<double> >::type score_cutoff(score_cutoffSEXP);
    rcpp_result_gen = Rcpp::wrap(postfix_distance(s1, s2, score_cutoff));
    return rcpp_result_gen;
END_RCPP
}
// postfix_similarity
size_t postfix_similarity(std::string s1, std::string s2, size_t score_cutoff);
RcppExport SEXP _RapidFuzz_postfix_similarity(SEXP s1SEXP, SEXP s2SEXP, SEXP score_cutoffSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type s1(s1SEXP);
    Rcpp::traits::input_parameter< std::string >::type s2(s2SEXP);
    Rcpp::traits::input_parameter< size_t >::type score_cutoff(score_cutoffSEXP);
    rcpp_result_gen = Rcpp::wrap(postfix_similarity(s1, s2, score_cutoff));
    return rcpp_result_gen;
END_RCPP
}
// postfix_normalized_distance
double postfix_normalized_distance(std::string s1, std::string s2, double score_cutoff);
RcppExport SEXP _RapidFuzz_postfix_normalized_distance(SEXP s1SEXP, SEXP s2SEXP, SEXP score_cutoffSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type s1(s1SEXP);
    Rcpp::traits::input_parameter< std::string >::type s2(s2SEXP);
    Rcpp::traits::input_parameter< double >::type score_cutoff(score_cutoffSEXP);
    rcpp_result_gen = Rcpp::wrap(postfix_normalized_distance(s1, s2, score_cutoff));
    return rcpp_result_gen;
END_RCPP
}
// postfix_normalized_similarity
double postfix_normalized_similarity(std::string s1, std::string s2, double score_cutoff);
RcppExport SEXP _RapidFuzz_postfix_normalized_similarity(SEXP s1SEXP, SEXP s2SEXP, SEXP score_cutoffSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type s1(s1SEXP);
    Rcpp::traits::input_parameter< std::string >::type s2(s2SEXP);
    Rcpp::traits::input_parameter< double >::type score_cutoff(score_cutoffSEXP);
    rcpp_result_gen = Rcpp::wrap(postfix_normalized_similarity(s1, s2, score_cutoff));
    return rcpp_result_gen;
END_RCPP
}
// prefix_distance
size_t prefix_distance(std::string s1, std::string s2, Rcpp::Nullable<double> score_cutoff);
RcppExport SEXP _RapidFuzz_prefix_distance(SEXP s1SEXP, SEXP s2SEXP, SEXP score_cutoffSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type s1(s1SEXP);
    Rcpp::traits::input_parameter< std::string >::type s2(s2SEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<double> >::type score_cutoff(score_cutoffSEXP);
    rcpp_result_gen = Rcpp::wrap(prefix_distance(s1, s2, score_cutoff));
    return rcpp_result_gen;
END_RCPP
}
// prefix_similarity
size_t prefix_similarity(std::string s1, std::string s2, size_t score_cutoff);
RcppExport SEXP _RapidFuzz_prefix_similarity(SEXP s1SEXP, SEXP s2SEXP, SEXP score_cutoffSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type s1(s1SEXP);
    Rcpp::traits::input_parameter< std::string >::type s2(s2SEXP);
    Rcpp::traits::input_parameter< size_t >::type score_cutoff(score_cutoffSEXP);
    rcpp_result_gen = Rcpp::wrap(prefix_similarity(s1, s2, score_cutoff));
    return rcpp_result_gen;
END_RCPP
}
// prefix_normalized_distance
double prefix_normalized_distance(std::string s1, std::string s2, double score_cutoff);
RcppExport SEXP _RapidFuzz_prefix_normalized_distance(SEXP s1SEXP, SEXP s2SEXP, SEXP score_cutoffSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type s1(s1SEXP);
    Rcpp::traits::input_parameter< std::string >::type s2(s2SEXP);
    Rcpp::traits::input_parameter< double >::type score_cutoff(score_cutoffSEXP);
    rcpp_result_gen = Rcpp::wrap(prefix_normalized_distance(s1, s2, score_cutoff));
    return rcpp_result_gen;
END_RCPP
}
// prefix_normalized_similarity
double prefix_normalized_similarity(std::string s1, std::string s2, double score_cutoff);
RcppExport SEXP _RapidFuzz_prefix_normalized_similarity(SEXP s1SEXP, SEXP s2SEXP, SEXP score_cutoffSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type s1(s1SEXP);
    Rcpp::traits::input_parameter< std::string >::type s2(s2SEXP);
    Rcpp::traits::input_parameter< double >::type score_cutoff(score_cutoffSEXP);
    rcpp_result_gen = Rcpp::wrap(prefix_normalized_similarity(s1, s2, score_cutoff));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_RapidFuzz_damerau_levenshtein_distance", (DL_FUNC) &_RapidFuzz_damerau_levenshtein_distance, 3},
    {"_RapidFuzz_damerau_levenshtein_similarity", (DL_FUNC) &_RapidFuzz_damerau_levenshtein_similarity, 3},
    {"_RapidFuzz_damerau_levenshtein_normalized_distance", (DL_FUNC) &_RapidFuzz_damerau_levenshtein_normalized_distance, 3},
    {"_RapidFuzz_damerau_levenshtein_normalized_similarity", (DL_FUNC) &_RapidFuzz_damerau_levenshtein_normalized_similarity, 3},
    {"_RapidFuzz_get_editops", (DL_FUNC) &_RapidFuzz_get_editops, 2},
    {"_RapidFuzz_editops_apply_str", (DL_FUNC) &_RapidFuzz_editops_apply_str, 3},
    {"_RapidFuzz_opcodes_apply_str", (DL_FUNC) &_RapidFuzz_opcodes_apply_str, 3},
    {"_RapidFuzz_opcodes_apply_vec", (DL_FUNC) &_RapidFuzz_opcodes_apply_vec, 3},
    {"_RapidFuzz_editops_apply_vec", (DL_FUNC) &_RapidFuzz_editops_apply_vec, 3},
    {"_RapidFuzz_processString", (DL_FUNC) &_RapidFuzz_processString, 3},
    {"_RapidFuzz_extract_similar_strings", (DL_FUNC) &_RapidFuzz_extract_similar_strings, 4},
    {"_RapidFuzz_extract_best_match", (DL_FUNC) &_RapidFuzz_extract_best_match, 4},
    {"_RapidFuzz_extract_matches", (DL_FUNC) &_RapidFuzz_extract_matches, 6},
    {"_RapidFuzz_fuzz_ratio", (DL_FUNC) &_RapidFuzz_fuzz_ratio, 3},
    {"_RapidFuzz_fuzz_partial_ratio", (DL_FUNC) &_RapidFuzz_fuzz_partial_ratio, 3},
    {"_RapidFuzz_fuzz_token_sort_ratio", (DL_FUNC) &_RapidFuzz_fuzz_token_sort_ratio, 3},
    {"_RapidFuzz_fuzz_token_set_ratio", (DL_FUNC) &_RapidFuzz_fuzz_token_set_ratio, 3},
    {"_RapidFuzz_fuzz_token_ratio", (DL_FUNC) &_RapidFuzz_fuzz_token_ratio, 3},
    {"_RapidFuzz_fuzz_WRatio", (DL_FUNC) &_RapidFuzz_fuzz_WRatio, 3},
    {"_RapidFuzz_fuzz_QRatio", (DL_FUNC) &_RapidFuzz_fuzz_QRatio, 3},
    {"_RapidFuzz_hamming_distance", (DL_FUNC) &_RapidFuzz_hamming_distance, 3},
    {"_RapidFuzz_hamming_similarity", (DL_FUNC) &_RapidFuzz_hamming_similarity, 3},
    {"_RapidFuzz_hamming_normalized_distance", (DL_FUNC) &_RapidFuzz_hamming_normalized_distance, 3},
    {"_RapidFuzz_hamming_normalized_similarity", (DL_FUNC) &_RapidFuzz_hamming_normalized_similarity, 3},
    {"_RapidFuzz_indel_distance", (DL_FUNC) &_RapidFuzz_indel_distance, 2},
    {"_RapidFuzz_indel_normalized_distance", (DL_FUNC) &_RapidFuzz_indel_normalized_distance, 2},
    {"_RapidFuzz_indel_similarity", (DL_FUNC) &_RapidFuzz_indel_similarity, 2},
    {"_RapidFuzz_indel_normalized_similarity", (DL_FUNC) &_RapidFuzz_indel_normalized_similarity, 2},
    {"_RapidFuzz_jaro_distance", (DL_FUNC) &_RapidFuzz_jaro_distance, 2},
    {"_RapidFuzz_jaro_similarity", (DL_FUNC) &_RapidFuzz_jaro_similarity, 2},
    {"_RapidFuzz_jaro_normalized_distance", (DL_FUNC) &_RapidFuzz_jaro_normalized_distance, 2},
    {"_RapidFuzz_jaro_normalized_similarity", (DL_FUNC) &_RapidFuzz_jaro_normalized_similarity, 2},
    {"_RapidFuzz_jaro_winkler_distance", (DL_FUNC) &_RapidFuzz_jaro_winkler_distance, 3},
    {"_RapidFuzz_jaro_winkler_similarity", (DL_FUNC) &_RapidFuzz_jaro_winkler_similarity, 3},
    {"_RapidFuzz_jaro_winkler_normalized_distance", (DL_FUNC) &_RapidFuzz_jaro_winkler_normalized_distance, 3},
    {"_RapidFuzz_jaro_winkler_normalized_similarity", (DL_FUNC) &_RapidFuzz_jaro_winkler_normalized_similarity, 3},
    {"_RapidFuzz_lcs_seq_distance", (DL_FUNC) &_RapidFuzz_lcs_seq_distance, 3},
    {"_RapidFuzz_lcs_seq_similarity", (DL_FUNC) &_RapidFuzz_lcs_seq_similarity, 3},
    {"_RapidFuzz_lcs_seq_normalized_distance", (DL_FUNC) &_RapidFuzz_lcs_seq_normalized_distance, 3},
    {"_RapidFuzz_lcs_seq_normalized_similarity", (DL_FUNC) &_RapidFuzz_lcs_seq_normalized_similarity, 3},
    {"_RapidFuzz_lcs_seq_editops", (DL_FUNC) &_RapidFuzz_lcs_seq_editops, 2},
    {"_RapidFuzz_levenshtein_distance", (DL_FUNC) &_RapidFuzz_levenshtein_distance, 2},
    {"_RapidFuzz_levenshtein_normalized_distance", (DL_FUNC) &_RapidFuzz_levenshtein_normalized_distance, 2},
    {"_RapidFuzz_levenshtein_similarity", (DL_FUNC) &_RapidFuzz_levenshtein_similarity, 2},
    {"_RapidFuzz_levenshtein_normalized_similarity", (DL_FUNC) &_RapidFuzz_levenshtein_normalized_similarity, 2},
    {"_RapidFuzz_osa_normalized_similarity", (DL_FUNC) &_RapidFuzz_osa_normalized_similarity, 3},
    {"_RapidFuzz_osa_editops", (DL_FUNC) &_RapidFuzz_osa_editops, 2},
    {"_RapidFuzz_osa_distance", (DL_FUNC) &_RapidFuzz_osa_distance, 3},
    {"_RapidFuzz_osa_similarity", (DL_FUNC) &_RapidFuzz_osa_similarity, 3},
    {"_RapidFuzz_osa_normalized_distance", (DL_FUNC) &_RapidFuzz_osa_normalized_distance, 3},
    {"_RapidFuzz_postfix_distance", (DL_FUNC) &_RapidFuzz_postfix_distance, 3},
    {"_RapidFuzz_postfix_similarity", (DL_FUNC) &_RapidFuzz_postfix_similarity, 3},
    {"_RapidFuzz_postfix_normalized_distance", (DL_FUNC) &_RapidFuzz_postfix_normalized_distance, 3},
    {"_RapidFuzz_postfix_normalized_similarity", (DL_FUNC) &_RapidFuzz_postfix_normalized_similarity, 3},
    {"_RapidFuzz_prefix_distance", (DL_FUNC) &_RapidFuzz_prefix_distance, 3},
    {"_RapidFuzz_prefix_similarity", (DL_FUNC) &_RapidFuzz_prefix_similarity, 3},
    {"_RapidFuzz_prefix_normalized_distance", (DL_FUNC) &_RapidFuzz_prefix_normalized_distance, 3},
    {"_RapidFuzz_prefix_normalized_similarity", (DL_FUNC) &_RapidFuzz_prefix_normalized_similarity, 3},
    {NULL, NULL, 0}
};

RcppExport void R_init_RapidFuzz(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
